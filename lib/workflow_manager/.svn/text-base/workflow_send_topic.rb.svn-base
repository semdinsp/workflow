require 'yaml'
require 'rubygems'
gem 'stomp'
require 'stomp'
gem 'stomp_message'
require 'stomp_message'
# This sends the sms to a activemq topic
module WorkflowManager
class WorkflowSendTopic < StompMessage::StompSendTopic
  attr_accessor :result, :a_hash
  #need to define topic, host properly
  @@TOPIC='/topic/workflow'
  # must be defined as method in sms_listener
 def initialize(options={})
   # set up variables using hash
    options[:topic] =   options[:topic]==nil ? @@TOPIC : options[:topic]  
    super(options)
    a_hash=options
    self.result=false
  end
  def initiate_workflow(msg2,arg_hash)
    
       m=StompMessage::Message.new('stomp_WORKFLOW', msg2.to_yaml)
       puts "message is initiate workflow #{m.to_xml}"
      #  billing_sender.setup_auto_close
       timeout=25
       arg_hash= {} if arg_hash==nil
        msg_received_flag =false
        result=false
        puts "Workflow Send topic #{msg2.to_yaml}"
       self.send_topic_acknowledge(m,arg_hash,timeout-1)  {   |msg| # puts 'in handle action block' 
                                puts "MESSAGE RECEIVED ---- #{msg.to_s} "
                                msg_received_flag=true
                                m=StompMessage::Message.load_xml(msg)
                                result=m.body
                              #  puts "result is #{result}"
                                result
                                 }
                            begin
                           Timeout::timeout(timeout) {
                                 while true  
                                    putc '.'
                                    break if msg_received_flag
                                    sleep(1)
                                    end  }
                              rescue SystemExit
                              rescue Timeout::Error
                              rescue Exception => e
                               puts "exception #{e.message} class: #{e.class}"
                               puts  "no receipt"
                              end
           # puts "result is now #{result}"
            result
  end

 

 
end #class
end #module